function [featureTable,outputTable] = diagnosticFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes signals:
%  ecg_tsa/signal
%
% This function computes spectra:
%  ecg_ps/SpectrumData
%
% This function computes features:
%  ecg_tsa_sigstats/ClearanceFactor
%  ecg_tsa_sigstats/CrestFactor
%  ecg_tsa_sigstats/ImpulseFactor
%  ecg_tsa_sigstats/Kurtosis
%  ecg_tsa_sigstats/Mean
%  ecg_tsa_sigstats/PeakValue
%  ecg_tsa_sigstats/RMS
%  ecg_tsa_sigstats/SINAD
%  ecg_tsa_sigstats/SNR
%  ecg_tsa_sigstats/ShapeFactor
%  ecg_tsa_sigstats/Skewness
%  ecg_tsa_sigstats/Std
%  ecg_tsa_sigstats/THD
%  ecg_tsa_tsfeat/Minimum
%  ecg_tsa_tsfeat/Median
%  ecg_tsa_tsfeat/Maximum
%  ecg_tsa_tsfeat/ACF1
%  ecg_tsa_tsfeat/PACF1
%  ecg_tsa_tsfeat_1/Minimum
%  ecg_tsa_tsfeat_1/Median
%  ecg_tsa_tsfeat_1/Maximum
%  ecg_tsa_tsfeat_1/Q1
%  ecg_tsa_tsfeat_1/Q3
%  ecg_tsa_tsfeat_1/IQR
%  ecg_tsa_tsfeat_1/q1
%  ecg_tsa_tsfeat_1/ACF1
%  ecg_tsa_tsfeat_1/ssACF10
%  ecg_tsa_tsfeat_1/PACF1
%  ecg_tsa_tsfeat_1/ssPACF5
%  ecg_tsa_spectrogramfeat/SpectralEntropy
%  ecg_tsa_spectrogramfeat/PeakValue
%  ecg_tsa_spectrogramfeat/CrestFactor
%  ecg_tsa_spectrogramfeat/ImpulseFactor
%  ecg_tsa_spectrogramfeat/ClearanceFactor
%  ecg_tsa_emdfeat/EnergyIMF1
%  ecg_tsa_emdfeat/PeakValueIMF1
%  ecg_tsa_emdfeat/CrestFactorIMF1
%  ecg_tsa_emdfeat/ImpulseFactorIMF1
%  ecg_tsa_emdfeat/ClearanceFactorIMF1
%  ecg_tsa_emdfeat/EnergyIMF2
%  ecg_tsa_emdfeat/PeakValueIMF2
%  ecg_tsa_emdfeat/CrestFactorIMF2
%  ecg_tsa_emdfeat/ImpulseFactorIMF2
%  ecg_tsa_emdfeat/ClearanceFactorIMF2
%  ecg_tsa_emdfeat/EnergyIMF3
%  ecg_tsa_emdfeat/PeakValueIMF3
%  ecg_tsa_emdfeat/CrestFactorIMF3
%  ecg_tsa_emdfeat/ImpulseFactorIMF3
%  ecg_tsa_emdfeat/ClearanceFactorIMF3
%  ecg_ps_spec/PeakAmp1
%  ecg_ps_spec/PeakFreq1
%  ecg_ps_spec/BandPower
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 21-Mar-2024 02:05:32

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',"ecg",'ConditionVariables',"Label");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new signal or feature names to DataVariables.
outputEnsemble.DataVariables = unique([outputEnsemble.DataVariables;"ecg_tsa";"ecg_tsa_sigstats";"ecg_tsa_tsfeat";"ecg_tsa_tsfeat_1";"ecg_tsa_spectrogramfeat";"ecg_tsa_emdfeat";"ecg_ps";"ecg_ps_spec"],'stable');

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = "ecg";

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Get all input variables.
    ecg = readMemberData(member,"ecg",["Time","signal"]);

    % Initialize a table to store results.
    memberResult = table;

    %% TSA
    try
        % Convert any datetime data to duration.
        if isdatetime(ecg.Time)
            tVib = ecg.Time - ecg.Time(1);
        else
            tVib = ecg.Time;
        end

        % Compute tacho pulse times in units of seconds.
        rpm = 100;
        tp = 60/rpm;

        % Compute the time-synchronous average.
        [xTsa,tTsa] = tsa(ecg.signal,tVib,tp, ...
            'Method','linear','NumRotations',1);

        % Add back the time offset.
        tTsa = tTsa + ecg.Time(1);

        % Package computed signal into a table.
        ecg_tsa = table(tTsa,xTsa,'VariableNames',{'Time','signal'});
    catch
        % Package computed signal into a table.
        ecg_tsa = array2table(NaN(1,2),'VariableNames',{'Time','signal'});
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_tsa},'VariableNames',{'ecg_tsa'})]; %#ok<AGROW>

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = ecg_tsa.signal;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);

        % Concatenate signal features.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];

        % Package computed features into a table.
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        ecg_tsa_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,13);
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        ecg_tsa_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_tsa_sigstats},'VariableNames',{'ecg_tsa_sigstats'})]; %#ok<AGROW>

    %% TimeSeriesFeatures
    try
        % Compute time series features.
        inputSignal = ecg_tsa.signal;

        N = 10;
        acf = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        acf = acf(N+2:end)';

        N = 5;
        rho = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        rho = rho(N+1:end);
        pacf = zeros(1,N);
        for L = 1:N
            a_hat = levinson(rho(1:L+1), L+1);
            pacf(L) = -a_hat(end);
        end

        % Extract individual feature values.
        Minimum = min(inputSignal);
        Median = median(inputSignal, 'omitnan');
        Maximum = max(inputSignal);
        ACF1 = acf(1);
        PACF1 = pacf(1);

        % Concatenate signal features.
        featureValues = [Minimum,Median,Maximum,ACF1,PACF1];

        % Package computed features into a table.
        featureNames = {'Minimum','Median','Maximum','ACF1','PACF1'};
        ecg_tsa_tsfeat = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,5);
        featureNames = {'Minimum','Median','Maximum','ACF1','PACF1'};
        ecg_tsa_tsfeat = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_tsa_tsfeat},'VariableNames',{'ecg_tsa_tsfeat'})]; %#ok<AGROW>

    %% TimeSeriesFeatures
    try
        % Compute time series features.
        inputSignal = ecg_tsa.signal;
        quartiles = quantile(inputSignal, [0.25 0.5 0.75]);
        quantiles = quantile(inputSignal, 0.95);

        N = 10;
        acf = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        acf = acf(N+2:end)';

        N = 5;
        rho = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        rho = rho(N+1:end);
        pacf = zeros(1,N);
        for L = 1:N
            a_hat = levinson(rho(1:L+1), L+1);
            pacf(L) = -a_hat(end);
        end

        % Extract individual feature values.
        Minimum = min(inputSignal);
        Median = median(inputSignal, 'omitnan');
        Maximum = max(inputSignal);
        Q1 = quartiles(1);
        Q3 = quartiles(3);
        IQR = quartiles(3)-quartiles(1);
        q1 = quantiles(1);
        ACF1 = acf(1);
        ssACF10 = sum(acf(1:10).^2);
        PACF1 = pacf(1);
        ssPACF5 = sum(pacf(1:5).^2);

        % Concatenate signal features.
        featureValues = [Minimum,Median,Maximum,Q1,Q3,IQR,q1,ACF1,ssACF10,PACF1,ssPACF5];

        % Package computed features into a table.
        featureNames = {'Minimum','Median','Maximum','Q1','Q3','IQR','q1','ACF1','ssACF10','PACF1','ssPACF5'};
        ecg_tsa_tsfeat_1 = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,11);
        featureNames = {'Minimum','Median','Maximum','Q1','Q3','IQR','q1','ACF1','ssACF10','PACF1','ssPACF5'};
        ecg_tsa_tsfeat_1 = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_tsa_tsfeat_1},'VariableNames',{'ecg_tsa_tsfeat_1'})]; %#ok<AGROW>

    %% SpectrogramFeatures
    try
        % Compute spectrogram based features.
        inputSignal = ecg_tsa.signal;
        t = ecg_tsa.Time;
        % Compute effective sampling rate.
        tNumeric = time2num(t,"seconds");
        Fs = effectivefs(tNumeric);
        % Compute Spectral Kurtosis.
        Sk = pkurtosis(inputSignal,Fs,10);

        SpectralEntropy = pentropy(inputSignal, Fs, 'Instantaneous',false);
        PeakValue = max(abs(Sk));
        CrestFactor = peak2rms(Sk);
        ImpulseFactor = max(abs(Sk))/mean(abs(Sk));
        ClearanceFactor = max(abs(Sk))/(mean(sqrt(abs(Sk)))^2);

        % Concatenate spectrogram features.
        featureValues = [SpectralEntropy,PeakValue,CrestFactor,ImpulseFactor,ClearanceFactor];

        % Package computed features into a table.
        featureNames = {'SpectralEntropy','PeakValue','CrestFactor','ImpulseFactor','ClearanceFactor'};
        ecg_tsa_spectrogramfeat = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,5);
        featureNames = {'SpectralEntropy','PeakValue','CrestFactor','ImpulseFactor','ClearanceFactor'};
        ecg_tsa_spectrogramfeat = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_tsa_spectrogramfeat},'VariableNames',{'ecg_tsa_spectrogramfeat'})]; %#ok<AGROW>

    %% EMDFeatures
    try
        % Compute Empirical Mode Decomposition based features.
        inputSignal = ecg_tsa.signal;
        % Compute Empirical Mode Decomposition of the signal.
        outputEMD = emd(inputSignal,"MaxNumIMF",3);

        EnergyIMF1 = sum(outputEMD(:,1));
        PeakValueIMF1 = max(abs(outputEMD(:,1)));
        CrestFactorIMF1 = peak2rms(outputEMD(:,1));
        ImpulseFactorIMF1 = max(abs(outputEMD(:,1)))/mean(abs(outputEMD(:,1)));
        ClearanceFactorIMF1 = max(abs(outputEMD(:,1)))/(mean(sqrt(abs(outputEMD(:,1))))^2);
        EnergyIMF2 = sum(outputEMD(:,2));
        PeakValueIMF2 = max(abs(outputEMD(:,2)));
        CrestFactorIMF2 = peak2rms(outputEMD(:,2));
        ImpulseFactorIMF2 = max(abs(outputEMD(:,2)))/mean(abs(outputEMD(:,2)));
        ClearanceFactorIMF2 = max(abs(outputEMD(:,2)))/(mean(sqrt(abs(outputEMD(:,2))))^2);
        EnergyIMF3 = sum(outputEMD(:,3));
        PeakValueIMF3 = max(abs(outputEMD(:,3)));
        CrestFactorIMF3 = peak2rms(outputEMD(:,3));
        ImpulseFactorIMF3 = max(abs(outputEMD(:,3)))/mean(abs(outputEMD(:,3)));
        ClearanceFactorIMF3 = max(abs(outputEMD(:,3)))/(mean(sqrt(abs(outputEMD(:,3))))^2);

        % Concatenate signal features.
        featureValues = [EnergyIMF1,PeakValueIMF1,CrestFactorIMF1,ImpulseFactorIMF1,ClearanceFactorIMF1,EnergyIMF2,PeakValueIMF2,CrestFactorIMF2,ImpulseFactorIMF2,ClearanceFactorIMF2,EnergyIMF3,PeakValueIMF3,CrestFactorIMF3,ImpulseFactorIMF3,ClearanceFactorIMF3];

        % Package computed features into a table.
        featureNames = {'EnergyIMF1','PeakValueIMF1','CrestFactorIMF1','ImpulseFactorIMF1','ClearanceFactorIMF1','EnergyIMF2','PeakValueIMF2','CrestFactorIMF2','ImpulseFactorIMF2','ClearanceFactorIMF2','EnergyIMF3','PeakValueIMF3','CrestFactorIMF3','ImpulseFactorIMF3','ClearanceFactorIMF3'};
        ecg_tsa_emdfeat = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,15);
        featureNames = {'EnergyIMF1','PeakValueIMF1','CrestFactorIMF1','ImpulseFactorIMF1','ClearanceFactorIMF1','EnergyIMF2','PeakValueIMF2','CrestFactorIMF2','ImpulseFactorIMF2','ClearanceFactorIMF2','EnergyIMF3','PeakValueIMF3','CrestFactorIMF3','ImpulseFactorIMF3','ClearanceFactorIMF3'};
        ecg_tsa_emdfeat = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_tsa_emdfeat},'VariableNames',{'ecg_tsa_emdfeat'})]; %#ok<AGROW>

    %% PowerSpectrum
    try
        % Get units to use in computed spectrum.
        tuReal = "seconds";

        % Compute effective sampling rate.
        tNumeric = time2num(ecg_tsa.Time,tuReal);
        [Fs,irregular] = effectivefs(tNumeric);
        Ts = 1/Fs;

        % Resample non-uniform signals.
        x_raw = ecg_tsa.signal;
        if irregular
            x = resample(x_raw,tNumeric,Fs,'linear');
        else
            x = x_raw;
        end

        % Set Welch spectrum parameters.
        L = fix(length(x)/4.5);
        noverlap = fix(L*50/100);
        win = hamming(L);

        % Compute the power spectrum.
        [ps,f] = pwelch(x,win,noverlap,[],Fs);
        w = 2*pi*f;

        % Convert frequency unit.
        factor = funitconv('rad/TimeUnit', 'Hz', 'seconds');
        w = factor*w;
        Fs = 2*pi*factor*Fs;

        % Remove frequencies above Nyquist frequency.
        I = w<=(Fs/2+1e4*eps);
        w = w(I);
        ps = ps(I);

        % Configure the computed spectrum.
        ps = table(w, ps, 'VariableNames', {'Frequency', 'SpectrumData'});
        ps.Properties.VariableUnits = {'Hz', ''};
        ps = addprop(ps, {'SampleFrequency'}, {'table'});
        ps.Properties.CustomProperties.SampleFrequency = Fs;
        ecg_ps = ps;
    catch
        ecg_ps = table(NaN, NaN, 'VariableNames', {'Frequency', 'SpectrumData'});
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_ps},'VariableNames',{'ecg_ps'})]; %#ok<AGROW>

    %% SpectrumFeatures
    try
        % Compute spectral features.
        % Get frequency unit conversion factor.
        factor = funitconv('Hz', 'rad/TimeUnit', 'seconds');
        ps = ecg_ps.SpectrumData;
        w = ecg_ps.Frequency;
        w = factor*w;
        mask_1 = (w>=factor*0.976562500000001) & (w<=factor*125);
        ps = ps(mask_1);
        w = w(mask_1);

        % Compute spectral peaks.
        [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
            'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',1);
        peakAmp = [peakAmp(:); NaN(1-numel(peakAmp),1)];
        peakFreq = [peakFreq(:); NaN(1-numel(peakFreq),1)];

        % Extract individual feature values.
        PeakAmp1 = peakAmp(1);
        PeakFreq1 = peakFreq(1);
        BandPower = trapz(w/factor,ps);

        % Concatenate signal features.
        featureValues = [PeakAmp1,PeakFreq1,BandPower];

        % Package computed features into a table.
        featureNames = {'PeakAmp1','PeakFreq1','BandPower'};
        ecg_ps_spec = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,3);
        featureNames = {'PeakAmp1','PeakFreq1','BandPower'};
        ecg_ps_spec = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({ecg_ps_spec},'VariableNames',{'ecg_ps_spec'})]; %#ok<AGROW>

    %% Write all the results for the current member to the ensemble.
    writeToLastMemberRead(outputEnsemble,memberResult)
end

% Gather all features into a table.
selectedFeatureNames = ["ecg_tsa_sigstats/ClearanceFactor","ecg_tsa_sigstats/CrestFactor","ecg_tsa_sigstats/ImpulseFactor","ecg_tsa_sigstats/Kurtosis","ecg_tsa_sigstats/Mean","ecg_tsa_sigstats/PeakValue","ecg_tsa_sigstats/RMS","ecg_tsa_sigstats/SINAD","ecg_tsa_sigstats/SNR","ecg_tsa_sigstats/ShapeFactor","ecg_tsa_sigstats/Skewness","ecg_tsa_sigstats/Std","ecg_tsa_sigstats/THD","ecg_tsa_tsfeat/Minimum","ecg_tsa_tsfeat/Median","ecg_tsa_tsfeat/Maximum","ecg_tsa_tsfeat/ACF1","ecg_tsa_tsfeat/PACF1","ecg_tsa_tsfeat_1/Minimum","ecg_tsa_tsfeat_1/Median","ecg_tsa_tsfeat_1/Maximum","ecg_tsa_tsfeat_1/Q1","ecg_tsa_tsfeat_1/Q3","ecg_tsa_tsfeat_1/IQR","ecg_tsa_tsfeat_1/q1","ecg_tsa_tsfeat_1/ACF1","ecg_tsa_tsfeat_1/ssACF10","ecg_tsa_tsfeat_1/PACF1","ecg_tsa_tsfeat_1/ssPACF5","ecg_tsa_spectrogramfeat/SpectralEntropy","ecg_tsa_spectrogramfeat/PeakValue","ecg_tsa_spectrogramfeat/CrestFactor","ecg_tsa_spectrogramfeat/ImpulseFactor","ecg_tsa_spectrogramfeat/ClearanceFactor","ecg_tsa_emdfeat/EnergyIMF1","ecg_tsa_emdfeat/PeakValueIMF1","ecg_tsa_emdfeat/CrestFactorIMF1","ecg_tsa_emdfeat/ImpulseFactorIMF1","ecg_tsa_emdfeat/ClearanceFactorIMF1","ecg_tsa_emdfeat/EnergyIMF2","ecg_tsa_emdfeat/PeakValueIMF2","ecg_tsa_emdfeat/CrestFactorIMF2","ecg_tsa_emdfeat/ImpulseFactorIMF2","ecg_tsa_emdfeat/ClearanceFactorIMF2","ecg_tsa_emdfeat/EnergyIMF3","ecg_tsa_emdfeat/PeakValueIMF3","ecg_tsa_emdfeat/CrestFactorIMF3","ecg_tsa_emdfeat/ImpulseFactorIMF3","ecg_tsa_emdfeat/ClearanceFactorIMF3","ecg_ps_spec/PeakAmp1","ecg_ps_spec/PeakFreq1","ecg_ps_spec/BandPower"];
featureTable = readFeatureTable(outputEnsemble,'Features',selectedFeatureNames);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
outputTable = readall(outputEnsemble);
end
