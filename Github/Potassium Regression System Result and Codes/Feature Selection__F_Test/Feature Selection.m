trainingData = Data_Potassium;
% [trainedModel, validationRMSE] = trainRegressionModel(trainingData)
% Returns a trained regression model and its RMSE. This code recreates the
% model trained in Regression Learner app. Use the generated code to
% automate training the same model with new data, or to learn how to
% programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%
%  Output:
%      trainedModel: A struct containing the trained regression model. The
%       struct contains various fields with information about the trained
%       model.
%
%      trainedModel.predictFcn: A function to make predictions on new data.
%
%      validationRMSE: A double representing the validation RMSE. In the
%       app, the Models pane displays the validation RMSE for each model.
%
% Use the code to train the model with new data. To retrain your model,
% call the function from the command line with your original data or new
% data as the input argument trainingData.
%
% For example, to retrain a regression model trained with the original data
% set T, enter:
%   [trainedModel, validationRMSE] = trainRegressionModel(T)
%
% To make predictions with the returned 'trainedModel' on new data T2, use
%   yfit = trainedModel.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedModel.HowToPredict

% Auto-generated by MATLAB on 25-Mar-2024 14:42:19


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'ECG_Morfological_Features1', 'ECG_Morfological_Features2', 'ECG_Morfological_Features3', 'ECG_Morfological_Features4', 'ECG_Morfological_Features5', 'ECG_Morfological_Features6', 'ECG_Morfological_Features7', 'ECG_Morfological_Features8', 'ECG_Morfological_Features9', 'ECG_Morfological_Features10', 'ECG_Morfological_Features11', 'ECG_Morfological_Features12', 'ecg_sigstats/ClearanceFactor', 'ecg_sigstats/CrestFactor', 'ecg_sigstats/ImpulseFactor', 'ecg_sigstats/Kurtosis', 'ecg_sigstats/Mean', 'ecg_sigstats/PeakValue', 'ecg_sigstats/RMS', 'ecg_sigstats/SINAD', 'ecg_sigstats/SNR', 'ecg_sigstats/ShapeFactor', 'ecg_sigstats/Skewness', 'ecg_sigstats/Std', 'ecg_sigstats/THD', 'ecg_tsfeat/Minimum', 'ecg_tsfeat/Median', 'ecg_tsfeat/Maximum', 'ecg_tsfeat/Q1', 'ecg_tsfeat/Q3', 'ecg_tsfeat/IQR', 'ecg_tsfeat/q1', 'ecg_tsfeat/ACF1', 'ecg_tsfeat/ssACF10', 'ecg_tsfeat/PACF1', 'ecg_tsfeat/ssPACF5', 'ecg_spectrogramfeat/SpectralEntropy', 'ecg_spectrogramfeat/PeakValue', 'ecg_spectrogramfeat/CrestFactor', 'ecg_spectrogramfeat/ImpulseFactor', 'ecg_spectrogramfeat/ClearanceFactor', 'ecg_emdfeat/EnergyIMF1', 'ecg_emdfeat/PeakValueIMF1', 'ecg_emdfeat/CrestFactorIMF1', 'ecg_emdfeat/ImpulseFactorIMF1', 'ecg_emdfeat/ClearanceFactorIMF1', 'ecg_emdfeat/EnergyIMF2', 'ecg_emdfeat/PeakValueIMF2', 'ecg_emdfeat/CrestFactorIMF2', 'ecg_emdfeat/ImpulseFactorIMF2', 'ecg_emdfeat/ClearanceFactorIMF2', 'ecg_emdfeat/EnergyIMF3', 'ecg_emdfeat/PeakValueIMF3', 'ecg_emdfeat/CrestFactorIMF3', 'ecg_emdfeat/ImpulseFactorIMF3', 'ecg_emdfeat/ClearanceFactorIMF3', 'ecg_ps_spec/PeakAmp1', 'ecg_ps_spec/PeakFreq1', 'ecg_ps_spec/BandPower', 'ECG_Age', 'ECG_Data_ICD9'};
predictors = inputTable(:, predictorNames);
response = inputTable.ECG_Data_Value;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Feature Ranking and Selection
% Replace Inf/-Inf values with NaN to prepare data for normalization
predictors = standardizeMissing(predictors, {Inf, -Inf});
% Normalize data for feature ranking
predictorMatrix= normalize(predictors, "DataVariable", ~isCategoricalPredictor);

% Rank features using FTest algorithm
featureIndex = fsrftest(...
    predictorMatrix, ...
    response);
numFeaturesToKeep = 10;
includedPredictorNames = predictors.Properties.VariableNames(featureIndex(1:numFeaturesToKeep));
predictors = predictors(:,includedPredictorNames);
isCategoricalPredictor = isCategoricalPredictor(featureIndex(1:numFeaturesToKeep));
